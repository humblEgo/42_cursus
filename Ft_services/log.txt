namespace/metallb-system unchanged
podsecuritypolicy.policy/controller configured
podsecuritypolicy.policy/speaker configured
serviceaccount/controller unchanged
serviceaccount/speaker unchanged
clusterrole.rbac.authorization.k8s.io/metallb-system:controller unchanged
clusterrole.rbac.authorization.k8s.io/metallb-system:speaker unchanged
role.rbac.authorization.k8s.io/config-watcher unchanged
role.rbac.authorization.k8s.io/pod-lister unchanged
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller unchanged
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker unchanged
rolebinding.rbac.authorization.k8s.io/config-watcher unchanged
rolebinding.rbac.authorization.k8s.io/pod-lister unchanged
daemonset.apps/speaker unchanged
deployment.apps/controller unchanged
configmap/config unchanged
Sending build context to Docker daemon  24.06kB
Step 1/16 : FROM alpine:3.11
 ---> f70734b6a266
Step 2/16 : LABEL maintainer="NGINX Docker Maintainers <docker-maint@nginx.com>"
 ---> Using cache
 ---> e63d064b6c3f
Step 3/16 : ENV NGINX_VERSION 1.19.1
 ---> Using cache
 ---> 233151a2468a
Step 4/16 : ENV NJS_VERSION   0.4.2
 ---> Using cache
 ---> d7a5d3762174
Step 5/16 : ENV PKG_RELEASE   1
 ---> Using cache
 ---> d44f4c31b1e2
Step 6/16 : RUN set -x     && addgroup -g 101 -S nginx     && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx     && apkArch="$(cat /etc/apk/arch)"     && nginxPackages="         nginx=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE}     "     && case "$apkArch" in         x86_64)             set -x             && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin"             && apk add --no-cache --virtual .cert-deps                 openssl             && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub             && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then                 echo "key verification succeeded!";                 mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/;             else                 echo "key verification failed!";                 exit 1;             fi             && apk del .cert-deps             && apk add -X "https://nginx.org/packages/mainline/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages             ;;         *)             set -x             && tempDir="$(mktemp -d)"             && chown nobody:nobody $tempDir             && apk add --no-cache --virtual .build-deps                 gcc                 libc-dev                 make                 openssl-dev                 pcre-dev                 zlib-dev                 linux-headers                 libxslt-dev                 gd-dev                 geoip-dev                 perl-dev                 libedit-dev                 mercurial                 bash                 alpine-sdk                 findutils             && su nobody -s /bin/sh -c "                 export HOME=${tempDir}                 && cd ${tempDir}                 && hg clone https://hg.nginx.org/pkg-oss                 && cd pkg-oss                 && hg up ${NGINX_VERSION}-${PKG_RELEASE}                 && cd alpine                 && make all                 && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk                 && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz                 "             && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/             && apk del .build-deps             && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages             ;;     esac     && if [ -n "$tempDir" ]; then rm -rf "$tempDir"; fi     && if [ -n "/etc/apk/keys/abuild-key.rsa.pub" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi     && if [ -n "/etc/apk/keys/nginx_signing.rsa.pub" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi     && apk add --no-cache --virtual .gettext gettext     && mv /usr/bin/envsubst /tmp/         && runDeps="$(         scanelf --needed --nobanner /tmp/envsubst             | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )"     && apk add --no-cache $runDeps     && apk del .gettext     && mv /tmp/envsubst /usr/local/bin/     && apk add --no-cache tzdata     && apk add --no-cache curl ca-certificates     && ln -sf /dev/stdout /var/log/nginx/access.log     && ln -sf /dev/stderr /var/log/nginx/error.log     && mkdir /docker-entrypoint.d
 ---> Using cache
 ---> 788578ecdb11
Step 7/16 : COPY docker-entrypoint.sh /
 ---> Using cache
 ---> dc46bc623dcd
Step 8/16 : COPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
 ---> Using cache
 ---> 555f3837b700
Step 9/16 : COPY 20-envsubst-on-templates.sh /docker-entrypoint.d
 ---> Using cache
 ---> c6acc0ef7344
Step 10/16 : RUN apk add openssh
 ---> Using cache
 ---> 2106f2cb00c4
Step 11/16 : RUN adduser -D iwoo
 ---> Using cache
 ---> fe1df8b2cbfa
Step 12/16 : RUN echo "iwoo:iwoo123"|chpasswd
 ---> Using cache
 ---> 1d8c9b94c9ab
Step 13/16 : ENTRYPOINT ["/docker-entrypoint.sh"]
 ---> Using cache
 ---> 653cab5eff12
Step 14/16 : EXPOSE 80 443 22
 ---> Using cache
 ---> 647ce2a3ec50
Step 15/16 : STOPSIGNAL SIGTERM
 ---> Using cache
 ---> d3e7ac895e35
Step 16/16 : CMD ["nginx", "-g", "daemon off;"]
 ---> Using cache
 ---> 6ac284772563
Successfully built 6ac284772563
Successfully tagged ft_nginx:1.0
deployment.apps/nginx created
service/nginx created
